// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux8Way16.hdl

/**
 * 8-way 16-bit multiplexor:
 * out = a if sel == 000
 *       b if sel == 001
 *       etc.
 *       h if sel == 111
 */

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    Not(in=sel[0], out=n0);
    Not(in=sel[1], out=n1);
    Not(in=sel[2], out=n2);

    And(a=n0, b=n1, out=n0n1);
    And(a=sel[0], b=n1, out=s0n1);
    And(a=n0, b=sel[1], out=n0s1);
    And(a=sel[0], b=sel[1], out=s0s1);

    And(a=n0n1, b=n2, out=selA);
    And(a=s0n1, b=n2, out=selB);
    And(a=n0s1, b=n2, out=selC);
    And(a=s0s1, b=n2, out=selD);
    And(a=n0n1, b=sel[2], out=selE);
    And(a=s0n1, b=sel[2], out=selF);
    And(a=n0s1, b=sel[2], out=selG);
    And(a=s0s1, b=sel[2], out=selH);

    And16(
      a[0]=a[0], b[0]=selA,
      a[1]=a[1], b[1]=selA,
      a[2]=a[2], b[2]=selA,
      a[3]=a[3], b[3]=selA,
      a[4]=a[4], b[4]=selA,
      a[5]=a[5], b[5]=selA,
      a[6]=a[6], b[6]=selA,
      a[7]=a[7], b[7]=selA,
      a[8]=a[8], b[8]=selA,
      a[9]=a[9], b[9]=selA,
      a[10]=a[10], b[10]=selA,
      a[11]=a[11], b[11]=selA,
      a[12]=a[12], b[12]=selA,
      a[13]=a[13], b[13]=selA,
      a[14]=a[14], b[14]=selA,
      a[15]=a[15], b[15]=selA,
      out=aAndSelA
    );
    And16(
      a[0]=b[0], b[0]=selB,
      a[1]=b[1], b[1]=selB,
      a[2]=b[2], b[2]=selB,
      a[3]=b[3], b[3]=selB,
      a[4]=b[4], b[4]=selB,
      a[5]=b[5], b[5]=selB,
      a[6]=b[6], b[6]=selB,
      a[7]=b[7], b[7]=selB,
      a[8]=b[8], b[8]=selB,
      a[9]=b[9], b[9]=selB,
      a[10]=b[10], b[10]=selB,
      a[11]=b[11], b[11]=selB,
      a[12]=b[12], b[12]=selB,
      a[13]=b[13], b[13]=selB,
      a[14]=b[14], b[14]=selB,
      a[15]=b[15], b[15]=selB,
      out=bAndSelB
    );
    And16(
      a[0]=c[0], b[0]=selC,
      a[1]=c[1], b[1]=selC,
      a[2]=c[2], b[2]=selC,
      a[3]=c[3], b[3]=selC,
      a[4]=c[4], b[4]=selC,
      a[5]=c[5], b[5]=selC,
      a[6]=c[6], b[6]=selC,
      a[7]=c[7], b[7]=selC,
      a[8]=c[8], b[8]=selC,
      a[9]=c[9], b[9]=selC,
      a[10]=c[10], b[10]=selC,
      a[11]=c[11], b[11]=selC,
      a[12]=c[12], b[12]=selC,
      a[13]=c[13], b[13]=selC,
      a[14]=c[14], b[14]=selC,
      a[15]=c[15], b[15]=selC,
      out=cAndSelC
    );
    And16(
      a[0]=d[0], b[0]=selD,
      a[1]=d[1], b[1]=selD,
      a[2]=d[2], b[2]=selD,
      a[3]=d[3], b[3]=selD,
      a[4]=d[4], b[4]=selD,
      a[5]=d[5], b[5]=selD,
      a[6]=d[6], b[6]=selD,
      a[7]=d[7], b[7]=selD,
      a[8]=d[8], b[8]=selD,
      a[9]=d[9], b[9]=selD,
      a[10]=d[10], b[10]=selD,
      a[11]=d[11], b[11]=selD,
      a[12]=d[12], b[12]=selD,
      a[13]=d[13], b[13]=selD,
      a[14]=d[14], b[14]=selD,
      a[15]=d[15], b[15]=selD,
      out=dAndSelD
    );
    And16(
      a[0]=e[0], b[0]=selE,
      a[1]=e[1], b[1]=selE,
      a[2]=e[2], b[2]=selE,
      a[3]=e[3], b[3]=selE,
      a[4]=e[4], b[4]=selE,
      a[5]=e[5], b[5]=selE,
      a[6]=e[6], b[6]=selE,
      a[7]=e[7], b[7]=selE,
      a[8]=e[8], b[8]=selE,
      a[9]=e[9], b[9]=selE,
      a[10]=e[10], b[10]=selE,
      a[11]=e[11], b[11]=selE,
      a[12]=e[12], b[12]=selE,
      a[13]=e[13], b[13]=selE,
      a[14]=e[14], b[14]=selE,
      a[15]=e[15], b[15]=selE,
      out=eAndSelE
    );
    And16(
      a[0]=f[0], b[0]=selF,
      a[1]=f[1], b[1]=selF,
      a[2]=f[2], b[2]=selF,
      a[3]=f[3], b[3]=selF,
      a[4]=f[4], b[4]=selF,
      a[5]=f[5], b[5]=selF,
      a[6]=f[6], b[6]=selF,
      a[7]=f[7], b[7]=selF,
      a[8]=f[8], b[8]=selF,
      a[9]=f[9], b[9]=selF,
      a[10]=f[10], b[10]=selF,
      a[11]=f[11], b[11]=selF,
      a[12]=f[12], b[12]=selF,
      a[13]=f[13], b[13]=selF,
      a[14]=f[14], b[14]=selF,
      a[15]=f[15], b[15]=selF,
      out=fAndSelF
    );
    And16(
      a[0]=g[0], b[0]=selG,
      a[1]=g[1], b[1]=selG,
      a[2]=g[2], b[2]=selG,
      a[3]=g[3], b[3]=selG,
      a[4]=g[4], b[4]=selG,
      a[5]=g[5], b[5]=selG,
      a[6]=g[6], b[6]=selG,
      a[7]=g[7], b[7]=selG,
      a[8]=g[8], b[8]=selG,
      a[9]=g[9], b[9]=selG,
      a[10]=g[10], b[10]=selG,
      a[11]=g[11], b[11]=selG,
      a[12]=g[12], b[12]=selG,
      a[13]=g[13], b[13]=selG,
      a[14]=g[14], b[14]=selG,
      a[15]=g[15], b[15]=selG,
      out=gAndSelG
    );
    And16(
      a[0]=h[0], b[0]=selH,
      a[1]=h[1], b[1]=selH,
      a[2]=h[2], b[2]=selH,
      a[3]=h[3], b[3]=selH,
      a[4]=h[4], b[4]=selH,
      a[5]=h[5], b[5]=selH,
      a[6]=h[6], b[6]=selH,
      a[7]=h[7], b[7]=selH,
      a[8]=h[8], b[8]=selH,
      a[9]=h[9], b[9]=selH,
      a[10]=h[10], b[10]=selH,
      a[11]=h[11], b[11]=selH,
      a[12]=h[12], b[12]=selH,
      a[13]=h[13], b[13]=selH,
      a[14]=h[14], b[14]=selH,
      a[15]=h[15], b[15]=selH,
      out=hAndSelH
    );

    Or16(a=aAndSelA, b=bAndSelB, out=xAndSelAOrB);
    Or16(a=cAndSelC, b=dAndSelD, out=xAndSelCOrD);
    Or16(a=eAndSelE, b=fAndSelF, out=xAndSelEOrF);
    Or16(a=gAndSelG, b=hAndSelH, out=xAndSelGorH);
    Or16(a=xAndSelAOrB, b=xAndSelCOrD, out=xAndSelAOrBOrCOrD);
    Or16(a=xAndSelEOrF, b=xAndSelGorH, out=xAndSelEOrFOrGOrH);
    Or16(a=xAndSelAOrBOrCOrD, b=xAndSelEOrFOrGOrH, out=out);
}

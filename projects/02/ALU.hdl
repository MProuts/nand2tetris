// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

/*
// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1
*/
CHIP ALU {
    IN
        x[16], y[16],  /* 16-bit inputs */
        zx, /* zero the x input? */
        nx, /* negate the x input? */
        zy, /* zero the y input? */
        ny, /* negate the y input? */
        f,  /* compute out = x + y (if 1) or x & y (if 0) */
        no; /* negate the out output? */

    OUT
        out[16], /* 16-bit output */
        zr, /* 1 if (out == 0), 0 otherwise */
        ng; /* 1 if (out < 0),  0 otherwise */

    PARTS:

    /* pre-setting the x input */
    Not(in=zx, out=notZX);
    Split16(in=nx,    out=nx16);
    Split16(in=notZX, out=notZX16);
    And16(a=notZX16, b=x, out=zxX);
    XOr16(a=nx16, b=zxX, out=presetX);

    /* pre-setting the y input */
    Not(in=zy, out=notZY);
    Split16(in=ny,    out=ny16);
    Split16(in=notZY, out=notZY16);
    And16(a=notZY16, b=y, out=zyY);
    XOr16(a=ny16, b=zyY, out=presetY);

    /* selecting between computing + or & */
    DMux16(sel=f, in=presetX, a=bitwiseX, b=adderX);
    DMux16(sel=f, in=presetY, a=bitwiseY, b=adderY);
    And16(a=bitwiseX, b=bitwiseY, out=bitwiseOut);
    Add16(a=adderX, b=adderY, out=adderOut);
    Or16(a=bitwiseOut, b=adderOut, out=selectOut);

    /* post-setting the output */
    Split16(in=no, out=no16);
    XOr16(a=no16, b=selectOut, out=tempOut);

    /* setting output bits */
    Nor16Digits(in=tempOut, out=zr);
    Neg(in=tempOut, out=ng);

    /* outputting the final value */
    And16(a=tempOut, b=true, out=out);
}

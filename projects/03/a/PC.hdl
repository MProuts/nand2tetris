// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:

    /* split `in` based on control bits */
    DMux16(
      in=in,
      sel=reset,
      b=inToReset,
      a=inToLoad
    );

    /* split `out` based on control bits */
    DMux16(
      in=regOut,
      sel=inc,
      b=outToInc,
      a=outToNone
    );

    /* perform operations on `in` where necessary */
    Inc16(in=outToInc, out=incOut);
    Zero16(in=inToReset, out=resetOut);

    /* join `in` based on control bits */
    Mux16(
      sel=reset,
      b=resetOut,
      a=inToLoad,
      out=muxResetAndLoad
    );

    /* join `out` based on control bits */
    Mux16(
      sel=inc,
      b=incOut,
      a=outToNone,
      out=muxIncAndNone
    );

    /* join `in` and `out` based on control bits */
    Or(a=reset, b=load, out=resetOrLoad);
    Mux16(
      sel=resetOrLoad,
      b=muxResetAndLoad,
      a=muxIncAndNone,
      out=muxResetLoadIncNone
    );

    /* get `load` on register based on control bits */
    Or(a=resetOrLoad, b=inc, out=resetOrLoadOrInc);

    /* set `load` and `in` on register */
    ARegister(
      in=muxResetLoadIncNone,
      load=resetOrLoadOrInc,
      out=regOut
    );

    And16(a=regOut, b=true, out=out);
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Select input for A-Register
    // (instruction or ALU output)
    Mux16(
      a=instruction, // if MSB == 0
      b=ALUOut,
      sel=instruction[15],
      out=AMuxOut
    );

    // Load A-Register if:
    // (dest == A) OR (MSB == 0)
    Not(in=instruction[15], out=aCommand);
    Or(
      a=aCommand,
      b=instruction[5], // dest == A
      out=aCommandOrADest
    );

    ARegister(
      in=AMuxOut,
      load=aCommandOrADest,
      out=RegAOut,
      out[0..14]=addressM
    );

    // Select y-input for ALU
    // (A-Register or M-input)
    Mux16(
      a=RegAOut, // A-digit == 0
      b=inM, // A-digit == 1
      sel=instruction[12],
      out=ALUMuxOut
    );

    // Load D-Register if:
    // (dest == A) AND !(ACommand)
    Not(in=aCommand, out=notACommand);
    And(
      a=notACommand,
      b=instruction[4], // dest == D
      out=loadD
    );
    DRegister(
      in=ALUOut,
      load=loadD,
      out=regDOut
    );

    ALU(
      x=regDOut,
      y=ALUMuxOut,
      zx=instruction[11],
      nx=instruction[10],
      zy=instruction[9],
      ny=instruction[8],
      f=instruction[7],
      no=instruction[6],
      out=ALUOut, // internal pin
      out=outM, // external pin
      zr=zr,
      ng=ng
    );

    // Load M-register if:
    // (dest == M) AND !(ACommand)
    And(
      a=notACommand,
      b=instruction[3], // dest == M
      out=writeM
    );

    ValueIsAny(
      value=ALUOut,
      isNeg=instruction[2],
      isZero=instruction[1],
      isPos=instruction[0],
      out=jumpCondMet
    );

    And(
      a=jumpCondMet,
      b=notACommand,
      out=jump
    );

    Nand(
      a=jump,
      b=reset,
      out=inc
    );

    PC(
      load=jump,
      inc=inc,
      reset=reset,
      in=RegAOut,
      out[0..14]=pc
    );
}
